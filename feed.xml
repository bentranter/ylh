<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Year Long Hackathon</title>
    <atom:link href="http://yearlonghackathon.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://yearlonghackathon.com</link>
    <description>By Ben Tranter</description>
    <pubDate>Sat, 31 Jan 2015 09:00:00 -0500</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Designing in the Browser</title>
      <link>http://yearlonghackathon.com/articles/week-4/</link>
      <pubDate>Sat, 31 Jan 2015 09:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://yearlonghackathon.com/articles/week-4/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The problem&lt;/strong&gt;: You need to design something that clicks and can be moved, or in my case, you don’t want to pay for an Adobe Creative Cloud subscription when you’re pretty fast at HTML and CSS.&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;-continuous-design-&quot;&gt;“Continuous Design”&lt;/h4&gt;
&lt;p&gt;Lately I’ve been fascinated by designers who skip Photoshop, Sketch, or any other design tools, and go straight to the browser. The earliest I heard of this was back in 2008 in &lt;a href=&quot;https://signalvnoise.com/posts/1061-why-we-skip-photoshop&quot;&gt;an old Signal vs. Noise blog post&lt;/a&gt;. Since then, I’ve heard of people being faster with HTML and CSS than in Photoshop (see &lt;a href=&quot;http://mrmrs.cc/&quot;&gt;mrmrs&lt;/a&gt;. I figured it was time I give it a try.&lt;/p&gt;
&lt;p&gt;Obviously if you’re a designer who always designs in the browser, developers are going to love you. There’s no question about what happens when you hover over something, click a link, or perform some other action if you’ve designed in the browser. There’s no guessing padding, margins, border-radiuses, or any other layout elements. It’s easy to tell what the mobile layouts look like because you’ve already created them (if you’re not doing responsive design by default in 2015 then wtf???) Best of all, it prevents you from mocking up stuff in Photoshop that is next to impossible to efficiently recreate in a browser.&lt;/p&gt;
&lt;h4 id=&quot;startup-auto-signup-whatever&quot;&gt;Startup-Auto-Signup-Whatever&lt;/h4&gt;
&lt;p&gt;I find myself signing up for random stuff on Product Hunt pretty often, and half the time I don’t even really read what the product is. I just sign up and await their initial email (or launch email if they haven’t launched yet). I figured a lot of people probably do this, which got me thinking: what if there was a service where you paid a set amount of money a month, and were automatically signed up for the latest, most popular startups? You could pick your interests, choose how much you’re willing to spend, and then just sit back and wait for an email that tells you what you’ve signed up for, while some algorithm curates startups for you. It’s like &lt;a href=&quot;https://www.lootcrate.com/&quot;&gt;Lootcrate&lt;/a&gt; for tech and startup enthusiasts. Startup creators would also love it because it’d gurantee them a few users no matter what when they launched.&lt;/p&gt;
&lt;p&gt;Initially it seems like a good idea, but after thinking about it for awhile it seemed kinda shitty. Either way, I was still gonna mock it up for fun. I decided to mockup the welcome page, signup process, and home screen. I chose &lt;a href=&quot;http://code.kik.com/app/2/index.html&quot;&gt;App.js&lt;/a&gt; and &lt;a href=&quot;http://tachyons.io/&quot;&gt;Tachyons&lt;/a&gt; initially for development, but ended up not using Tachyons for this because of the learning curve. I would really like to try it again as it seems pretty cool.&lt;/p&gt;
&lt;p&gt;I was hoping it would take me an hour and a half, but it ended up taking about four and a half hours. That’s quite a bit longer than it would’ve taken me in Sketch, but you gotta start somewhere. You can see it in action at &lt;a href=&quot;http://yearlonghackathon.com/demos/autosignup/&quot;&gt;yearlonghackathon/demos/autosignup&lt;/a&gt;. Use Chrome or Firefox’s mobile emulator, look at it on a phone, or at the very least shrink your browser window down for the best experience.&lt;/p&gt;
&lt;p&gt;I know I’m a bit off-schedule with the posts, but my next post should make up for that. It’s about creating REST APIs with Express and RethinkDB, and consuming them with Ampersand.js. I think it’ll be pretty cool, so watch for that around next Tuesday or so.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Doing Magic with Meteor at Startup Weekend</title>
      <link>http://yearlonghackathon.com/articles/week-3/</link>
      <pubDate>Mon, 19 Jan 2015 11:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://yearlonghackathon.com/articles/week-3/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The problem&lt;/strong&gt;: You enter startup weekend and need to build an app that can run everywhere. You’ve basically got a day to implement the functionality, and then another day to implement the design. If this sounds like something you have to do, you might as well use Meteor.&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;meteor&quot;&gt;Meteor&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://meteor.com&quot;&gt;Meteor&lt;/a&gt; makes a lot of claims, but its basically another full-stack way to write realtime web and mobile apps in JavaScript. It has its own &lt;em&gt;everything&lt;/em&gt;: templating system, layout engine, database integration, package manager, and a lot of other stuff (except it doesn’t have its own router… what the heck?). It also has more magic than I’ve ever seen in any other framework. I don’t actually understand it well enough to write a tutorial about it, so I’ll just talk about my experience with it, and some of the crazy stuff I discovered it can do.&lt;/p&gt;
&lt;h6 id=&quot;go-to-mydeas-co-https-mydeas-co-to-see-the-app-if-you-re-on-an-iphone-add-it-your-home-screen-since-it-s-web-app-capable-for-the-full-experience-&quot;&gt;Go to &lt;a href=&quot;https://mydeas.co&quot;&gt;mydeas.co&lt;/a&gt; to see the app (if you’re on an iPhone, add it your home screen since it’s web-app capable, for the full experience)&lt;/h6&gt;
&lt;p&gt;The app was intended to be yet-another-note-taking app, but with a better way to tag your notes, and realtime sharing of notes with any other user. The app basically works by signing in, typing a note to add, selecting a tag from a list of tags, and hitting submit to add it to your notes. You can filter notes by tags, and edit notes once you’ve created them. The sharing feature is enabled by default in the app, so all your notes are visible and editable by other users. Note that this app wasn’t my idea, so if you think it’s a bit ridiculous, then that’s perfectly okay.&lt;/p&gt;
&lt;h4 id=&quot;the-magic&quot;&gt;The Magic&lt;/h4&gt;
&lt;p&gt;First some background: Meteor has &lt;em&gt;collections&lt;/em&gt;, which are used to model data. &lt;code&gt;Notes&lt;/code&gt; in the upcoming example just refers to a collection in our database with that name. Also, each template typically has an accompanying file with a bunch of JavaScript for event handling, and providing helper functions. Here’s &lt;code&gt;home.js&lt;/code&gt;. What you’re about to see is pure magic.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Template.home.events({
  &lt;span class=&quot;string&quot;&gt;&quot;change .note&quot;&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; note = e.currentTarget.value;
    Notes.update({_id: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._id}, {$set: {title: note}});
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the code for changing an existing note. When you change the contents of an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, the change event fires. Then, we use &lt;code&gt;e.currentTarget.value&lt;/code&gt; to grab the text that was changed inside that input field. Then, we &lt;em&gt;get the database id of the note we want to change from that same &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/em&gt;. How?? How would you ever get a database id from a string you pulled out of the DOM? That’s black magic.&lt;/p&gt;
&lt;h4 id=&quot;sometimes-there-is-too-much-magic&quot;&gt;Sometimes There is Too Much Magic&lt;/h4&gt;
&lt;p&gt;We wanted to be able to toggle a tag by clicking or tapping on it. You think you’d just be able to change the class on the click event, and when a user hits submit, iterate through the list of tags, get the array of selected tags by classname, and then put those tags in the database along with the rest of your note. Not in Meteor (at least not in any way that we could figure out). In Meteor, you have to use a &lt;em&gt;Session&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Template.home.events({
  &lt;span class=&quot;string&quot;&gt;&quot;click .unselected, touchstart .unselected&quot;&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;

    e.currentTarget.className = &lt;span class=&quot;string&quot;&gt;'selected'&lt;/span&gt;;

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tags = Session.get(&lt;span class=&quot;string&quot;&gt;'tags'&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!tags) {
      tags = []; 
    }

    tags.push(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tag);
    Session.set(&lt;span class=&quot;string&quot;&gt;'tags'&lt;/span&gt;, tags);
  },
  &lt;span class=&quot;string&quot;&gt;&quot;submit .new-note&quot;&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!Session.get(&lt;span class=&quot;string&quot;&gt;'tags'&lt;/span&gt;)) {
      alert(&lt;span class=&quot;string&quot;&gt;&quot;Need tag&quot;&lt;/span&gt;);
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
    } 

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; note = e.target.text.value;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (note) {
      Notes.insert({
        title: note,
        created: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(),
        userId: Meteor.userId(),
        author: Meteor.user().username,
        tags: Session.get(&lt;span class=&quot;string&quot;&gt;'tags'&lt;/span&gt;)
      });
    }

    e.target.text.value = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; Session.keys[&lt;span class=&quot;string&quot;&gt;'tags'&lt;/span&gt;];
    selected = $(&lt;span class=&quot;string&quot;&gt;'.selected'&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; selected.length; i++){
      selected[i].className = &lt;span class=&quot;string&quot;&gt;'unselected'&lt;/span&gt;;
    }

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what’s happening: when you click the tag you want, we start by changing the class name. Then, if there aren’t any tags yet, we create an empty array, and push the tag into the array. Meteor provides us with a &lt;code&gt;Session&lt;/code&gt; object, and we add each new tag into that. The session is just a key-value thing so it’s straightforward enough.&lt;/p&gt;
&lt;p&gt;When we submit a new note, quite a bit more stuff takes place. We check the session to see if any tags have been set, and throw an error if there aren’t. Then we insert the note along with the selected tags. That part is actually kind of nice because of how easy it is. However, that’s where we stopped our insertion logic for awhile, until some weird stuff started happening. Turns out, a fun way to leak memory and annoy your users in Meteor is forgetting to clear the session after submission. If you’re not used to web apps, or you had already been coding for ten hours like we were :P, you forget that the browser isn’t going to refresh after submission. You have to clear the session after submission, obviously, since the browser isn’t going to be doing a refresh anytime soon.&lt;/p&gt;
&lt;p&gt;The last two bits of code just change the class of the selected tags to unselected, and then return false (it basically does the same thing as &lt;code&gt;event.preventDefault()&lt;/code&gt;). Compared to calling a &lt;code&gt;.toggle()&lt;/code&gt; in jQuery and using a for loop to blast through your list looking for &lt;code&gt;.selected&lt;/code&gt; tags, this was pretty unfamiliar and took a little while to figure out.&lt;/p&gt;
&lt;p&gt;Well, that’s enough for this time. Be sure to check the project if you’re interested, and definitely check out Meteor if you’ve got a hackathon of any sort coming up. Next week will be a backend-only post about building APIs with Express and RethinkDB, so I’m pretty excited about that. See you next time.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Templating in Jade, The Good Parts</title>
      <link>http://yearlonghackathon.com/articles/week-2/</link>
      <pubDate>Sun, 11 Jan 2015 11:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://yearlonghackathon.com/articles/week-2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The problem&lt;/strong&gt;: You’re a front-end web designer or developer who knows HTML and CSS who wants to learn more, but you don’t know where to start. Learning a templating language first is a great way to get a feel for the more complciated front-end concepts, and Jade is as good a place to start as any.&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;jade-the-good-parts&quot;&gt;Jade: The Good Parts&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://jade-lang.com&quot;&gt;Jade&lt;/a&gt; claims to be the template engine for Nodejs. It’s currently maintained by &lt;a href=&quot;http://www.forbeslindesay.co.uk&quot;&gt;Forbes Lindesay&lt;/a&gt; and was originally authored by TJ Holowaychuk (if you haven’t heard of him, just do a Google search and prepare to be amazed). Jade can generate HTML, so let’s look at some Jade input and check out the HTML output:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorry about the lack of Jade syntax highlighting, I’m working on it&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;jade&quot;&gt;Jade&lt;/h6&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;body
  h1.site-title Hello, World!
  #content
    p We&amp;#39;re using Jade!
  #sidebar
    ul
      li Isn&amp;#39;t the markup so much cleaner?
      li And more legible?
      li And awesome?
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&quot;html&quot;&gt;HTML&lt;/h6&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;site-title&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, World!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;We're using Jade!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;sidebar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Isn't the markup so much cleaner?&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;And more legible?&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;And awesome?&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can tell just by looking at it that Jade operates on indentation and spaces. When writing Jade, you’ll need to indent using 2 spaces (or a soft tab set to two spaces). If you forget to this, Jade will complain. At this point, you could &lt;code&gt;$ npm install -g jade&lt;/code&gt;, but I think you’ll find its easier to learn how to use Jade while actually making something with it. &lt;a href=&quot;http://wintersmith.io&quot;&gt;Wintersmith&lt;/a&gt;, the static site generator I used to make this site, uses Jade for its templates, so let’s make a theme for Wintersmith and learn Jade at the same time.&lt;/p&gt;
&lt;h4 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;In my last post, I covered how to set up a static site with Wintersmith and deploy it on GitHub Pages. If you don’t have Wintersmith installed on your machine, please &lt;a href=&quot;http://yearlonghackathon.com/articles/week-1/&quot;&gt;check that article out&lt;/a&gt; quickly to get up to speed.&lt;/p&gt;
&lt;p&gt;Once of you’ve done that, we’re going to run &lt;code&gt;$ wintersmith new my-site-name&lt;/code&gt;, where my-site-name should be replaced with the name of your site. From there, open the generated folder in your text editor of choice (I’m using &lt;a href=&quot;http://http://www.sublimetext.com/3&quot;&gt;Sublime Text 3&lt;/a&gt; for this) and check out the file structure. You’ll see four folders:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Contents&lt;/em&gt; - This where your articles, your sites authors, your CSS, and any other markdown files will go, as well as your favicon and images (should you choose to include those things). It also includes a file named &lt;code&gt;feed.json&lt;/code&gt; which generates your RSS feed.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Node_Modules&lt;/em&gt; - This is where your node modules will go! (Obviously). You don’t need to go in here.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Plugins&lt;/em&gt; - This is where Wintersmith specific plugins go. Right now, it should only contain the pagination plugin.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Templates&lt;/em&gt; - This is where the Jade happens. These are the templates that define the look and feel of your site. There should be six templates when you start any new site.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are also three more files. The config just allows to define site-wide variables, like the site URL, your name, etc. It also lets you tell Wintersmith which plugins you’re using, and lets you define settings for those plugins. The package file is for NPM, and just states the dependencies for your site. The README is up for you to fill in, should you want to create a README for your site at all.&lt;/p&gt;
&lt;h4 id=&quot;deleting-a-bunch-of-stuff&quot;&gt;Deleting a Bunch of Stuff&lt;/h4&gt;
&lt;p&gt;You’ll never truly learn anything by just spinning the pre-made templates, so go ahead and &lt;strong&gt;delete all of them&lt;/strong&gt;. Seriously. Since we’ve deleted everything, our stylesheet probably isn’t very useful, so go ahead and &lt;strong&gt;delete all the content&lt;/strong&gt; in &lt;code&gt;main.css&lt;/code&gt;, but leave that file there. Let’s start from scratch.&lt;/p&gt;
&lt;h6 id=&quot;note-css-and-front-end-javascript-aren-t-part-of-this-tutorial-so-we-re-just-going-to-use-foundation-5-to-make-life-easy-please-check-the-repo-for-this-article-if-you-re-unsure-on-how-to-add-the-stylesheets-and-accompanying-javascript-&quot;&gt;Note: CSS and front-end JavaScript aren’t part of this tutorial, so we’re just going to use Foundation 5 to make life easy. Please check the repo for this article if you’re unsure on how to add the stylesheets and accompanying JavaScript.&lt;/h6&gt;
&lt;h6 id=&quot;another-note-wintersmith-is-kind-of-annoying-in-that-some-files-need-specific-names-you-ll-see-this-as-you-read-on-&quot;&gt;Another Note: Wintersmith is kind of annoying in that some files need specific names. You’ll see this as you read on.&lt;/h6&gt;
&lt;h4 id=&quot;layout&quot;&gt;Layout&lt;/h4&gt;
&lt;p&gt;Create new file called &lt;code&gt;layout.jade&lt;/code&gt; in the templates folder. This is the file that defines the main structure of your site. Let’s add in the usual boilerplate code that every site needs:&lt;/p&gt;
&lt;h4 id=&quot;layout-jade&quot;&gt;layout.jade&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;doctype html
html(lang=&amp;#39;en&amp;#39;)
  head
    block head
      meta(charset=&amp;#39;utf-8&amp;#39;)
      meta(http-equiv=&amp;#39;X-UA-Compatible&amp;#39;, content=&amp;#39;IE=edge,chrome=1&amp;#39;)
      meta(name=&amp;#39;viewport&amp;#39;, content=&amp;#39;width=device-width&amp;#39;)
      title= locals.name
      link(rel=&amp;#39;alternate&amp;#39;, href=locals.url+&amp;#39;/feed.xml&amp;#39;, type=&amp;#39;application/rss+xml&amp;#39;, title=locals.description)
      link(rel=&amp;#39;stylesheet&amp;#39;, href=&amp;#39;/css/main.css&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’ve written any HTML before, everything here should be pretty familiar. There should only be two things that stick out: the two &lt;code&gt;block&lt;/code&gt;s and the &lt;code&gt;= locals.name&lt;/code&gt;. This is the stuff Jade can do that HTML can’t do. When you define a &lt;code&gt;block&lt;/code&gt;, you’re essentially defining a bunch of HTML that can be overridden by another template using &lt;code&gt;extend&lt;/code&gt;. This lets you create default content, and then override it with content from a different template. We’ll see this in action very soon. The &lt;code&gt;= locals.name&lt;/code&gt; allows you to evaluate some expression and assign it to an attribute. It’s very important to include the space after &lt;code&gt;=&lt;/code&gt;, otherwise Jade won’t think its an expression and won’t evaluate anything. The variable &lt;code&gt;locals.name&lt;/code&gt; just refers to our local values defined it &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here’s the rest of &lt;code&gt;layout.jade&lt;/code&gt;:&lt;/p&gt;
&lt;h4 id=&quot;layout-jade&quot;&gt;layout.jade&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;  body
    block nav
      p Navigation goes here

    header.site-header.row
      block header
          h2= locals.name

    main.container
      block content
          h2 Welcome! This is the default content.

    footer.site-footer
      block footer
        p &amp;amp;copy; #{ new Date().getFullYear() + &amp;#39; &amp;#39; + locals.owner }

    script(src=&amp;quot;/js/jquery.js&amp;quot;)
    script(src=&amp;quot;/js/main.js&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the indentation. Everything is indented by two spaces to keep in within the original &lt;code&gt;html&lt;/code&gt; tag. We also see two more new things here. The first is &lt;code&gt;a(href=locals.url)&lt;/code&gt;. You might be thinking, “Don’t we need a space after the &lt;code&gt;=&lt;/code&gt; sign here?” The answer is nope, because Jade recognizes that there aren’t a pair of quotations around &lt;code&gt;locals.url&lt;/code&gt; so it recognizes that it needs to evaluate that. The next new thing is the &lt;code&gt;#{ new Date... }&lt;/code&gt; that we see in the last line. The &lt;code&gt;#{ ... }&lt;/code&gt; just tells Jade to run some JavaScript within those brackets. You should be able to tell that this just generates the string ‘© 2015 Someone’ (where someone is the value of the &lt;code&gt;locals.owner&lt;/code&gt;).&lt;/p&gt;
&lt;h4 id=&quot;index&quot;&gt;Index&lt;/h4&gt;
&lt;p&gt;Create a new file in the templates directory called &lt;code&gt;index.jade&lt;/code&gt;. The very first line in this file should be:&lt;/p&gt;
&lt;h4 id=&quot;index-jade&quot;&gt;index.jade&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;extends layout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now unfortunately, Wintersmith doesn’t have Jade implemented perfectly, so we can only create files named layout, index, and article, and have &lt;code&gt;extends&lt;/code&gt; work (if someone knows how to get around this, please tell me because this drove me insane when making my site). Luckily, we can keep our code organized by using &lt;code&gt;includes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before ceating any new files, let’s write our &lt;code&gt;index.html&lt;/code&gt; template:&lt;/p&gt;
&lt;h4 id=&quot;index-jade&quot;&gt;index.jade&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;extends layout

block nav
  include partials/nav

block header
  block title
    include partials/title
  block signup
    include partials/signup

block content
  h2.news-and-events News &amp;amp;amp; Upcoming Events

  each article in articles
    article
      header
        p.date
          span= moment.utc(article.date).format(&amp;#39;MMMM Do YYYY&amp;#39;)
        h2
          a(href=article.url)= article.title
      section.content
        if article.intro.length &amp;gt; 0
          | !{ typogr(article.intro).typogrify() }
        if article.hasMore
          p.more
            a(href=article.url) Read More

block prepend footer
  if prevPage
    a(href=prevPage.url) « Previous
  if nextPage
    a(href=nextPage.url) Next »
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, make a new directory within &lt;code&gt;templates&lt;/code&gt; named &lt;code&gt;partials&lt;/code&gt;. Inside &lt;code&gt;partials&lt;/code&gt;, create four files: &lt;code&gt;logo.jade&lt;/code&gt;, &lt;code&gt;nav.jade&lt;/code&gt;, &lt;code&gt;signup.jade&lt;/code&gt;, and &lt;code&gt;title.jade&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Going back to &lt;code&gt;index.jade&lt;/code&gt;, I know this might be a lot to take in, but its really not too bad. We’re defining four blocks, and linking some partials to them. Those partials are the new jade files we just created in our &lt;code&gt;partials&lt;/code&gt;subfolder. In our content block, we cone across some new concepts. The &lt;code&gt;each&lt;/code&gt; statement is your basic looping structure that the typical programming language would provide. In this case, “each” is saying, “For every &lt;code&gt;index.md&lt;/code&gt; file in the folder &lt;code&gt;articles&lt;/code&gt;, render the content that appears before our &lt;code&gt;&amp;lt;span class=&amp;quot;more&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; tag”. The other unfamiliar things you see is are two plugins at work: moment and typogrify. Moment just formats the date in a more readable way, and typogrify ads a bit of syntactic sugar to our markup to improve our typography.&lt;/p&gt;
&lt;p&gt;You also might’ve noticed that we’re using an &lt;code&gt;if&lt;/code&gt; block in there. Jade evaluates if statements the same as any other programming language. In this case, it’s testing against a variable provided by our typography plugin to determine whether or not it needs to run the plugin when generating the static site. You can probably guess what’s happening in the footer block.&lt;/p&gt;
&lt;p&gt;That’s about it for our index, let’s move on to the partials. We might as well start with the navigation, since it sits at the top of the page.&lt;/p&gt;
&lt;h4 id=&quot;partials-nav-jade&quot;&gt;partials/nav.jade&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;nav(class=&amp;quot;top-bar&amp;quot;,data-topbar,role=&amp;quot;navigation&amp;quot;)
  ul.title-area
    li.name
      h1
        a(href=locals.url) Site Name
    li.toggle-topbar.menu-icon
      a(href=&amp;quot;#&amp;quot;)
        span Menu
  section.top-bar-section
    ul.right
      li
        a(href=&amp;quot;#&amp;quot;) Link 1
      li
        a(href=&amp;quot;#&amp;quot;) Link 2
      li
        a(href=&amp;quot;#&amp;quot;) Link 3
      li
        a(href=&amp;quot;#&amp;quot;) Link 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just basic markup for a responsive menu using Foundation 5. No new concepts here. Let’s look at our title partial.&lt;/p&gt;
&lt;h4 id=&quot;partials-title-jade&quot;&gt;partials/title.jade&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;.small-12.medium-8.columns
  h4.site-subtitle= locals.description
  p.site-description= locals.about
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing new in here, except you can see that we’ve added a new variable in locals, called &lt;code&gt;locals.about&lt;/code&gt;. Let’s go to &lt;code&gt;config.json&lt;/code&gt; to make sure we’ve added that correctly.&lt;/p&gt;
&lt;h4 id=&quot;config-json&quot;&gt;config.json&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
  &amp;quot;locals&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;http://localhost:8080&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Site Name&amp;quot;,
    &amp;quot;owner&amp;quot;: &amp;quot;Your Name&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Welcome to my awesome site&amp;quot;,
    &amp;quot;about&amp;quot;: &amp;quot;About my site&amp;quot;
  }, // more stuff comes after this but we don&amp;#39;t need to worry about it
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only way you can realy mess is this up is by forgetting or adding a comma. If you get an error, check your commas! There shouldn’t be a comma after the “about” line. Let’s move on to our sign up partial.&lt;/p&gt;
&lt;h4 id=&quot;partials-signup-jade&quot;&gt;partials/signup.jade&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;.small-12.medium-4.columns
  //- Your Mailchimp, Aweber, etc code goes in here
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a fun exercise for you: take the HTML that one of these services generates, and try cnverting it to Jade. This will really help you get a feel for the language’s syntax. If you get stuck and you’re using Mailchimp, check the repo.&lt;/p&gt;
&lt;p&gt;So far, we’ve got the structure of our site down. Now, we’ll need to get the structure of individual articles down. Create a new file at the top of the &lt;code&gt;contents&lt;/code&gt; folder (meaning &lt;strong&gt;not&lt;/strong&gt; inside partials) and call it &lt;code&gt;article.jade&lt;/code&gt;. Here’s the code for it.&lt;/p&gt;
&lt;h4 id=&quot;article-jade&quot;&gt;article.jade&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;
extends layout

block nav
  include partials/nav

block prepend title
  | #{ page.title + &amp;quot; - &amp;quot;}

block header
  h1= page.title
  p
    | #{ &amp;quot;Written by &amp;quot; + page.metadata.author }

block content
  article.article
    section.content!= typogr(page.html).typogrify()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see here, we’re extending the layout again, but overriding our blocks with different content. This will make the layout of our articles different than the layout for our index. You’ll notice we’ve done something new here again. We’e used the character &lt;code&gt;|&lt;/code&gt; (pronounced ‘pipe’) before our JavaScript evaluation. Using this character simply allows the evaluated JavaScript to appear as plaintext. We also see &lt;code&gt;page.metadata.author&lt;/code&gt;. Basically, anything beginning with &lt;code&gt;page.metadata&lt;/code&gt; is just the way the values we put at the top of our markdown files are accessed in Wintersmith.&lt;/p&gt;
&lt;p&gt;We’ve come to the single most confusing thing in Jade (for me at least): the syntax for escaping text. You’ll see in the content block, there is this line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;section.content!= typogr(page.html).typogrify()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your first instinct is to probably ask yourself, “are we saying that the content of the section &lt;em&gt;isn’t&lt;/em&gt; page.html?” Normally, you’d be right, but Jade does things stragely. The &lt;code&gt;!=&lt;/code&gt; sign is simply telling Jade &lt;strong&gt;not&lt;/strong&gt; to escape the HTML in the generated &lt;code&gt;page.html&lt;/code&gt;. If we used an &lt;code&gt;=&lt;/code&gt; instead, we’d get escaped HTML as output, so our aticles would render as one long string made up of the HTML that makes up our entire content block. See &lt;a href=&quot;http://jade-lang.com/reference/attributes/#unescaped&quot;&gt;this page&lt;/a&gt; in the docs for mor info.&lt;/p&gt;
&lt;p&gt;We’re almost done now, we just need to create one more page: the page for displaying actual pages (as opposed to articles). This is another kind of annoying thing in Wintersmith, because you’ll need to create three files to do this: &lt;code&gt;page.jade&lt;/code&gt; at the top of the &lt;code&gt;templates&lt;/code&gt; folder, &lt;code&gt;page.json&lt;/code&gt; at the top of the &lt;code&gt;contents&lt;/code&gt; folder, and &lt;code&gt;page.md&lt;/code&gt;, also at the top of the &lt;code&gt;contents&lt;/code&gt; folder. Here’s what each file looks like, respectively:&lt;/p&gt;
&lt;h4 id=&quot;article-jade&quot;&gt;article.jade&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-jade&quot;&gt;extends layout

block nav
    include partials/nav

block content
    !=contents[&amp;#39;page.md&amp;#39;].html
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;page-json&quot;&gt;page.json&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
  &quot;&lt;span class=&quot;attribute&quot;&gt;template&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;page.jade&quot;&lt;/span&gt;
&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;page-json&quot;&gt;page.json&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-markdown&quot;&gt;&lt;span class=&quot;horizontal_rule&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;header&quot;&gt;view: none
---&lt;/span&gt;

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s it! Remember, you can precview your site by running &lt;code&gt;wintersmith preview&lt;/code&gt;. Your new page will appear at &lt;code&gt;0.0.0.0:8080/page.html&lt;/code&gt;. Check out the source to see the site that was built based on this article.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Deploying a Static Site to GitHub Pages with Wintersmith</title>
      <link>http://yearlonghackathon.com/articles/week-1/</link>
      <pubDate>Sun, 04 Jan 2015 10:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://yearlonghackathon.com/articles/week-1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The Problem&lt;/strong&gt;: You need a website fast, you don’t want to spend any money, and you need to be able to update it easily. Luckily, GitHub pages will host your static site for free, and Wintersmith is an easy-to-use and easy-to-learn static website generator. It’s even suitable for people with no knowledge of web programming.&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;*Note&lt;/strong&gt;: Anytime I use a new or different technology, I’ll do my best to explain how to install it. Let’s get started by installing Node.&lt;/p&gt;
&lt;h4 id=&quot;installing-node&quot;&gt;Installing Node&lt;/h4&gt;
&lt;p&gt;Head on over to &lt;a href=&quot;http://http://nodejs.org/&quot;&gt;nodejs.org&lt;/a&gt; and click the ‘Install’ button. From there, just run the installer once you’ve downloaded it, and you should be good to go. To test it out, open your console. On a Mac, its just called Terminal and can be found in your applications, or by searching with spotlight, and on Windows, its called Console and can be found from the start menu, or by searching for it (I haven’t used Windows in a while, please correct me if I’m wrong).&lt;/p&gt;
&lt;p&gt;You can test to see if Node installed correctly by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ node
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: you don’t actually type the ‘$’ symbol, its just used to inform you that you should be running a command instead of typing code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If it works, the Node REPL will start. You can hit Control-C on any system to exit the Node REPL. Congrats! You’ve installed Node.js.&lt;/p&gt;
&lt;h4 id=&quot;npm&quot;&gt;NPM&lt;/h4&gt;
&lt;p&gt;NPM stands for ‘Nice People Matter’, or ‘Node Package Manager’ (whichever you prefer). Its a package manager for JavaScript. NPM should install automatically when you install Node, but let’s make sure its there. Just run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ npm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As long as you don’t get a ‘command not found’ type of error, everything is good. Now, we’ll install Wintersmith using NPM.&lt;/p&gt;
&lt;h4 id=&quot;install-wintersmith&quot;&gt;Install Wintersmith&lt;/h4&gt;
&lt;p&gt;This is as easy as running one command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install wintersmith -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where &lt;code&gt;install&lt;/code&gt; means download a package to your computer, &lt;code&gt;-g&lt;/code&gt; is a flag that instructs the package to be downloaded globally, so you can use that package anywhere (as opposed to only within a certain project directory), and finally &lt;code&gt;wintersmith&lt;/code&gt; is the name of the package we want to install.&lt;/p&gt;
&lt;p&gt;Note that installing wintersmith may take an unusually long time to install (like more than five minutes), but that’s okay, nothing’s going wrong so just be patient :)&lt;/p&gt;
&lt;h4 id=&quot;generate-a-new-site&quot;&gt;Generate A New Site&lt;/h4&gt;
&lt;p&gt;This is as simple as running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ wintersmith new project-name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;project-name&lt;/code&gt; is obviously the name of your site. From here, enter the directory of your new site and preview it by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; project-name
$ wintersmith preview
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and open up &lt;code&gt;localhost:8080&lt;/code&gt; in a web browser. You’ll see a website built with the default theme.&lt;/p&gt;
&lt;h4 id=&quot;writing-a-new-post&quot;&gt;Writing A New Post&lt;/h4&gt;
&lt;p&gt;Writing a new post is as simple as creating a new folder in the &lt;code&gt;articles&lt;/code&gt; directory, and creating a new markdown document within the new directory. To do this, we’ll stop the server (type Control-C), and then run a few simple commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; contents/articles
$ mkdir new-post
$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; new-post
$ touch new-post.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we’ve done here is change into the directory named &lt;code&gt;articles&lt;/code&gt;, created a new folder using the &lt;code&gt;$ mkdir&lt;/code&gt; command, navigated to that folder, and created a new markdown document using the &lt;code&gt;$ touch&lt;/code&gt; command. From here, you should go to a sample post to copy/paste the metadata (the stuff at the top of the document in between the &lt;code&gt;---&lt;/code&gt;‘s) and replace it with your own info. At this point, you can write your post! Check out this &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;mardown cheatsheet&lt;/a&gt; for a handy reference on how to write in markdown if you’re new to it. Start your server again once you’ve written a post to preview it.&lt;/p&gt;
&lt;h4 id=&quot;building-your-static-site-for-deployment&quot;&gt;Building Your Static Site For Deployment&lt;/h4&gt;
&lt;p&gt;Wintersmith makes this really easy. Just run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;wintersmith build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will generate a site made up of static HTML and CSS pages. The site will appear in a new folder called &lt;code&gt;build&lt;/code&gt;, located at the top of your new sites directory. This new site is what GitHub requires to host our site.&lt;/p&gt;
&lt;h4 id=&quot;deploying-to-github-pages&quot;&gt;Deploying to GitHub Pages&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: You’ll need git installed for this section to be possible. That is outside the scope of this tutorial, but a simple Google search should get you sorted out :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, make sure you’ve actually signed up for a GitHub account. Just got to &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; to do that, it’s really easy. From there, find the ‘+’ at the top beside your name, and click ‘New Repository’.&lt;/p&gt;
&lt;p&gt;Name the new repo &lt;code&gt;username.github.io&lt;/code&gt;. It must match your username exactly, or this won’t work. Once that’s done, you’ll need to clone the repository locally:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git clone https://github.com/username/username.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After doing that, copy the contents from the &lt;code&gt;build&lt;/code&gt; folder we generated into this repository (it’ll just appear as a folder called &lt;code&gt;username.github.io&lt;/code&gt; somewhere on your computer). We’re almost done now, finish off by comitting the changes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git add --all
$ git commit -m &lt;span class=&quot;string&quot;&gt;&quot;First commit&quot;&lt;/span&gt;
$ git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s it! Your site will now be live at username.github.io. If you’re wondering what those git commands do, I’ll break it down. The command &lt;code&gt;add -all&lt;/code&gt; adds each changed file to be staged. The command &lt;code&gt;commit -m&lt;/code&gt; means that you’re comitting the staged changes to the master branch, with the comment ‘First commit’. &lt;code&gt;push&lt;/code&gt; simply syncs the changes from your local repository to your remote repository on GitHub.&lt;/p&gt;
&lt;p&gt;I’ll be revisiting this tutorial soon to talk about theming/templating in Wintersmith, using custom domains with GitHub Pages, and creating a custom 404 page. If you want to see the source code for this tutorial, just click the link below and you’ll be taken to the source on GitHub.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Hello, World!</title>
      <link>http://yearlonghackathon.com/articles/week-0/</link>
      <pubDate>Wed, 31 Dec 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://yearlonghackathon.com/articles/week-0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The Problem&lt;/strong&gt;: I like making things but I’m too scared to ship them. The solution? I force myself to ship new stuff on a weekly basis for an entire year, and write about it.&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As long as I’ve been programming (which is around three years as of writing), I’ve always been making things. Most things have been pretty lame and broken, but the creative process is the main reason I like programming. Its like playing with lego, except you can’t step on a program and cut your foot open (at least not literally).&lt;/p&gt;
&lt;p&gt;One thing I’ve always struggled with is shipping. Out of all the things I’ve made, I’ve never had the confidence to actually release them out into the world. The point of this project is for me to force myself to become better at shipping, as well as to give me platform to share all the dumb stuff I’ve made with the world.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Every Sunday of this year, I’ll be releasing a project (either new, or a significant iteration) along with some words about how it was created.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was always fascinated by hackathons. Its pretty crazy what people are capable of creating in a short period of time. Its also pretty crazy how long it can take for devs to release or update software. I’ve been on both sides: I’ve participated in hackathons, and created something non-trivial in less than a full weekend’s time, and I’ve failed to complete a todo app over the course of a month. I’ve basically decided that the only way to become truly efficient at creating and shipping code, is to practice that exact thing.&lt;/p&gt;
&lt;p&gt;The code, website, and everything that makes up this project will be publicly available on &lt;a href=&quot;https://github.com/bentranter&quot;&gt;GitHub&lt;/a&gt;. Besides this project, I’m also a third year student at Lakehead University in Computer Science, and a part time front-end developer at &lt;a href=&quot;http://boltmedia.ca/&quot;&gt;Bolt Media&lt;/a&gt;. If you’re interested in keeping up with me elsewhere, I’m on &lt;a href=&quot;https://twitter.com/0xBen&quot;&gt;Twitter&lt;/a&gt;, and do all my non-techinical writing on &lt;a href=&quot;https://medium.com/@0xben&quot;&gt;Medium&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I guess I should end by making a note of my intentions to do at least a few projects that don’t involve JavaScript, if only for my own accountability :) I’m sorry to everyone who dislikes the language, and I’ll admit it has an impressive amount of flaws. However, once you step into the community, you’ll never want to leave. Its the best!&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>